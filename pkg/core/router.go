package core

import (
	"bytes"
	"fmt"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

var defCatchallHandler = func(c *Ctx) error {
	log.Info("Default CatchAll Handler, URL: ", c.Request.URL.String())
	c.Response.SetStatus(404)
	c.Response.Message = "Not found!"
	return nil
}

func newRouter(path string) *Router {
	return &Router{
		basePath: path,
	}
}

// Router is a router for the application.
type Router struct {
	groups []*Router
	routes []*Route

	basePath    string
	middlewares []Middleware
}

// Use adds a middleware to the router.
func (r *Router) Use(m Middleware) {
	r.middlewares = append(r.middlewares, m)
}

// GetBasePath returns the base path of the router.
func (r Router) GetBasePath() string {
	if len(r.basePath) > 1 {
		if string(r.basePath[len(r.basePath)-1]) != "/" {
			return fmt.Sprintf("%s/", r.basePath)
		}
	} else if r.basePath == "" {
		return "/"
	}
	return r.basePath
}

// GET adds a GET endpoint to the router.
func (r *Router) GET(path string, handler Handler, opt ...RouteOption) {
	r.addEndpoint(METHOD_GET, path, handler, opt...)
}

// POST adds a POST endpoint to the router.
func (r *Router) POST(path string, handler Handler, opt ...RouteOption) {
	r.addEndpoint(METHOD_POST, path, handler, opt...)
}

// PUT adds a PUT endpoint to the router.
func (r *Router) PUT(path string, handler Handler, opt ...RouteOption) {
	r.addEndpoint(METHOD_PUT, path, handler, opt...)
}

// DELETE adds a DELETE endpoint to the router.
func (r *Router) DELETE(path string, handler Handler, opt ...RouteOption) {
	r.addEndpoint(METHOD_DELETE, path, handler, opt...)
}

// OPTIONS adds an OPTIONS endpoint to the router.
func (r *Router) OPTIONS(path string, handler Handler, opt ...RouteOption) {
	r.addEndpoint(METHOD_OPTIONS, path, handler, opt...)
}

// Redirect adds a redirect to the router.
func (r *Router) Redirect(path, targetURL string, code int) {
	h := func(c *Ctx) error {
		c.Response.Redirect(targetURL, code)
		return nil
	}
	r.addEndpoint(METHOD_GET, path, h, WithOpenApiDisabled())
}

// TODO: Add a ReadMulti method to the CrudInterface and implement corresponding router functionality to allow fetching multiple resources based on criteria.
// TODO: Add BulkUpdate, BulkDelete, and BulkCreate methods to the CrudInterface and implement corresponding router functionalities for efficient batch operations.
// TODO: Implement a mechanism to allow setting individual RouteOptions for each endpoint generated by the CRUD function, overriding the general CRUD options.
type CrudInterface interface {
	CreateFunc(any) (any, error)
	ReadAllFunc() ([]any, error)
	ReadOneFunc(any) (any, error)
	UpdateFunc(any, any) (any, error)
	DeleteFunc(any) (any, error)
}

// Add full CreateReadUpdateDelete Endpoints, for the basePath and given CrudInterface.
// Only adding Endpoints, for defined functions in CrudInterface.
// RouteOptions will be applied to all, for individual Options will be added later.
// POST   {basePath}/{id} -> Create
// GET    {basePath}/     -> ReadAll
// GET    {basePath}/{id}	-> ReadOne
// PUT    {basePath}/{id}	-> Update
// DELETE {basePath}/{id} -> Delete
// func (r *Router) CRUD(basePath string, ci CrudInterface, opt ...RouteOption) {
// 	pathWithID := fmt.Sprintf("%s/{id}", basePath)
//
// 	if ci.CreateFunc != nil {
// 		r.addEndpoint(METHOD_POST, pathWithID, ci.CreateFunc, opt...)
// 	}
// }

// StaticSevFileConfig holds the configuration for serving a static file.
type StaticSevFileConfig struct {
	preLoad     bool
	contentType string
	// TODO: Add more ConfigOptions
	// includeHiddenFiles bool
	// excludeFiles []strings // as regex
	// excludeDirs []strings // as regex
	// indexFile string
	// customCssFile string
}

// StaticServFileOption is a function that configures a StaticSevFileConfig.
type StaticServFileOption func(*StaticSevFileConfig)

// NewStaticServeFileConfig creates a new StaticSevFileConfig.
func NewStaticServeFileConfig(opts ...StaticServFileOption) *StaticSevFileConfig {
	c := &StaticSevFileConfig{
		preLoad:     true,
		contentType: "",
	}

	for _, opt := range opts {
		opt(c)
	}

	return c
}

// WithPreLoad it looks if files exits on startup, if not, it will return an error.
func WithPreLoad() StaticServFileOption {
	return func(c *StaticSevFileConfig) {
		c.preLoad = true
	}
}

// WithoutPreLoad it will not look if files exits on startup! Be careful if using this option with a Directory, this function will expose all files in the directory, even if created after Server start!
func WithoutPreLoad() StaticServFileOption {
	return func(c *StaticSevFileConfig) {
		c.preLoad = false
	}
}

// WithContentType sets the content type of the file.
func WithContentType(contentType string) StaticServFileOption {
	return func(c *StaticSevFileConfig) {
		c.contentType = contentType
	}
}

// TODO: add compression on startup or on the fly based on "preLoaded"
// TODO: add option to load files directly to memory

// ServeStaticFile serves a static file.
func (r *Router) ServeStaticFile(urlPath, filePath string, opt ...StaticServFileOption) error {
	config := NewStaticServeFileConfig(opt...)
	absFilePath, err := filepath.Abs(filePath)

	if config.preLoad {
		if err != nil {
			log.Errorf("Error resolving absolute path for static file %s: %v", filePath, err)
			return err
		}

		log.Debugf("Attempting to serve static file from absolute path: %s", absFilePath)

		if _, err := os.Stat(absFilePath); os.IsNotExist(err) {
			err = fmt.Errorf("static file '%s' does not exist. Please ensure the file exists", absFilePath)
			log.Error(err)
			return err
		}

		content, err := os.ReadFile(absFilePath)
		if err != nil {
			err = fmt.Errorf("static file '%s' exists, but is not readable: %w", absFilePath, err)
			log.Error(err)
			return err
		}

		h := func(c *Ctx) error {
			c.Response.SetStatus(200)
			c.Response.SetData(content)
			c.Response.AddHeader("Content-Type", config.contentType)
			return nil
		}

		r.addEndpoint(
			METHOD_GET,
			urlPath,
			h,
			WithOpenApiDisabled(),
		)
	} else {
		h := func(c *Ctx) error {
			if err != nil {
				log.Errorf("Error resolving absolute path for static file %s: %v", filePath, err)
				return err
			}

			if _, err := os.Stat(absFilePath); os.IsNotExist(err) {
				err = fmt.Errorf("static file '%s' does not exist. Please ensure the file exists", absFilePath)
				log.Error(err)

				c.Response.SetStatus(404)
				c.Response.SetMessage("File not found... Please double-check the URL and try again.")
				return err
			}

			content, err := os.ReadFile(absFilePath)
			if err != nil {
				err = fmt.Errorf("static file '%s' exists, but is not readable: %w", absFilePath, err)
				log.Error(err)

				c.Response.SetStatus(500)
				c.Response.SetMessage("File was found, but is not readable... Please try again later, if it persists, contact the administrator.")
				return nil
			}

			c.Response.SetStatus(200)
			c.Response.SetData(content)
			c.Response.AddHeader("Content-Type", config.contentType)
			return nil
		}

		r.addEndpoint(
			METHOD_GET,
			urlPath,
			h,
			WithOpenApiDisabled(),
		)
	}

	return nil
}

// TODO: Better Breadcrumbs
const dirExplorerTemplate = `
{{$BaseUrl := .BaseUrl}}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>{{.Title}} - File Explorer</title>
    <link rel="icon" href="./favicon.ico" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
      :root {
        --primary-color: #007bff;
        --secondary-color: #6c757d;
        --background-color: #f8f9fa;
        --card-background: #ffffff;
        --border-color: #dee2e6;
        --text-color: #343a40;
        --link-color: #007bff;
        --link-hover-color: #0056b3;
        --header-bg: #e9ecef;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol";
        line-height: 1.6;
        color: var(--text-color);
        background-color: var(--background-color);
        margin: 0;
        padding: 0;
      }

      .container {
        max-width: 960px;
        margin: 20px auto;
        padding: 0 15px;
      }

      header {
        background-color: var(--header-bg);
        padding: 20px 0;
        border-bottom: 1px solid var(--border-color);
        text-align: center;
      }

      header h1 {
        margin: 0;
        color: var(--primary-color);
      }

      .file-list {
        list-style: none;
        padding: 0;
        margin-top: 20px;
        background-color: var(--card-background);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      }

      .file-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s ease;
      }

      .file-item:last-child {
        border-bottom: none;
      }

      .file-item:hover {
        background-color: #f1f3f5;
      }

      .file-item a {
        text-decoration: none;
        color: var(--link-color);
        display: flex;
        align-items: center;
        flex-grow: 1;
      }

      .file-item a:hover {
        color: var(--link-hover-color);
      }

      .file-icon {
        width: 24px;
        text-align: center;
        margin-right: 15px;
        color: var(--secondary-color);
      }

      .file-icon.folder {
        color: #ffc107; /* Yellow for folders */
      }

      .file-name {
        flex-grow: 1;
        font-weight: 500;
      }

      .file-size {
        font-size: 0.9em;
        color: var(--secondary-color);
        margin-left: 15px;
      }

      .path-breadcrumb {
        margin-top: 15px;
        padding: 10px 20px;
        background-color: var(--header-bg);
        border-radius: 5px;
        font-size: 0.9em;
      }

      .path-breadcrumb a {
        text-decoration: none;
        color: var(--primary-color);
      }

      .path-breadcrumb span {
        color: var(--secondary-color);
      }

      .path-breadcrumb a:hover {
        text-decoration: underline;
      }

      footer {
        text-align: center;
        margin-top: 40px;
        padding: 20px;
        color: var(--secondary-color);
        font-size: 0.8em;
      }

      @media (max-width: 768px) {
        .file-item {
          flex-wrap: wrap;
        }
        .file-size {
          margin-left: 0;
          width: 100%;
          text-align: right;
          font-size: 0.85em;
          padding-top: 5px;
        }
        .file-name {
          flex-basis: calc(100% - 39px); /* icon width + margin */
        }
      }
    </style>
  </head>
  <body>
    <header>
      <div class="container">
        <h1><i class="fas fa-folder-open"></i> {{.Title}}</h1>
      </div>
    </header>
    <main class="container">
      <nav class="path-breadcrumb">
        <!-- Example Breadcrumb (You'll need to pass this data from Go) -->
        <!-- For now, assuming Title is the current path -->
        You are in:
        <a href="{{$BaseUrl}}">Home</a>
        {{- if ne .Title "/"}}
          <span> / </span>
          <span>{{.Title}}</span>
        {{- end}}
      </nav>

      <ul class="file-list">
				{{range .Dirs}}
					<li class="file-item">
						<a href="{{$BaseUrl}}{{.Name}}/">
							<span class="file-icon">
								<i class="fas fa-folder folder"></i>
							</span>
							<span class="file-name">{{.Name}}</span>
						</a>
					</li>
				{{end}}

        {{range .Files}}
          <li class="file-item">
            <a href="{{$BaseUrl}}{{.Name}}">
              <span class="file-icon">
                {{if (hasSuffix .Name ".pdf")}}
                  <i class="fas fa-file-pdf"></i>
                {{else if (or (hasSuffix .Name ".png") (hasSuffix .Name ".jpg") (hasSuffix .Name ".jpeg") (hasSuffix .Name ".gif"))}}
                  <i class="fas fa-file-image"></i>
                {{else if (or (hasSuffix .Name ".zip") (hasSuffix .Name ".rar") (hasSuffix .Name ".7z"))}}
                  <i class="fas fa-file-archive"></i>
                {{else if (or (hasSuffix .Name ".doc") (hasSuffix .Name ".docx"))}}
                  <i class="fas fa-file-word"></i>
                {{else if (or (hasSuffix .Name ".xls") (hasSuffix .Name ".xlsx"))}}
                  <i class="fas fa-file-excel"></i>
                {{else if (or (hasSuffix .Name ".ppt") (hasSuffix .Name ".pptx"))}}
                  <i class="fas fa-file-powerpoint"></i>
                {{else if (or (hasSuffix .Name ".txt") (hasSuffix .Name ".md") (hasSuffix .Name ".go") (hasSuffix .Name ".html") (hasSuffix .Name ".css") (hasSuffix .Name ".js") (hasSuffix .Name ".json") (hasSuffix .Name ".xml"))}}
                  <i class="fas fa-file-code"></i>
                {{else if (or (hasSuffix .Name ".mp3") (hasSuffix .Name ".wav"))}}
                  <i class="fas fa-file-audio"></i>
                {{else if (or (hasSuffix .Name ".mp4") (hasSuffix .Name ".mov") (hasSuffix .Name ".avi"))}}
                  <i class="fas fa-file-video"></i>
                {{else}}
                  <i class="fas fa-file"></i>
                {{end}}
              </span>
              <span class="file-name">{{.Name}}</span>
              <span class="file-size">
								{{.Size | byteFormat}}
              </span>
            </a>
          </li>
        {{end}}
      </ul>
			{{if and (eq (len .Files) 0) (eq (len .Dirs) 0)}}
        <p style="text-align: center; color: var(--secondary-color);">
          This directory is empty.
        </p>
      {{end}}
    </main>
    <footer>
      <p>ApiRight File Explorer</p>
    </footer>
  </body>
</html>
`

type DirTemplateData struct {
	Title   string
	BaseUrl string
	Files   []FileData
	Dirs    []DirData
}

type FileData struct {
	Name string
	Size int64
}

type DirData struct {
	Name string
}

// setupTemplateFuncs creates and returns a template.FuncMap
// containing our custom functions.
func setupTemplateFuncs() template.FuncMap {
	return template.FuncMap{
		"hasSuffix": func(s, suffix string) bool {
			return strings.HasSuffix(s, suffix)
		},
		"byteFormat": func(b int64) string {
			const unit = 1024
			if b < unit {
				return fmt.Sprintf("%d B", b)
			}
			div, exp := int64(unit), 0
			for n := b / unit; n >= unit; n /= unit {
				div *= unit
				exp++
			}
			// KMGTPE represents Kilo, Mega, Giga, Tera, Peta, Exa
			return fmt.Sprintf("%.1f %cB", float64(b)/float64(div), "KMGTPE"[exp])
		},
	}
}

// ServeStaticDir serves a directory at the given URL path.
// If the directory contains a "index.html" file, it will be served as "/" route. If not a FileExplorer will be shown, by default.
// It is highly recommended to leave the PreLoad option enabled.
func (r *Router) ServeStaticDir(urlPath, dirPath string, a App, opt ...StaticServFileOption) {
	a.Logger.Debug("📁 Serving static directory: ", dirPath, " at: ", urlPath)
	config := NewStaticServeFileConfig(opt...)

	dirTempl, err := template.New(urlPath).Funcs(setupTemplateFuncs()).Parse(dirExplorerTemplate)
	if err != nil {
		panic(err)
	}
	buf := new(bytes.Buffer)

	pattern := urlPath
	if !strings.HasSuffix(pattern, "/") {
		pattern += "/"
	}

	if config.preLoad {
		dirData := DirTemplateData{
			Title:   "ApiRight", // TODO: Add title from AppConfig
			BaseUrl: pattern,
			Files:   []FileData{},
			Dirs:    []DirData{},
		}
		files, err := os.ReadDir(dirPath)
		if err != nil {
			panic(err)
		}

		if len(files) == 0 {
			panic("Directory is empty: " + dirPath)
		}

		indexFileExists := false
		for _, file := range files {
			if file.Name() == "index.html" {
				indexFileExists = true
				break
			}
		}

		a.Redirect(urlPath, urlPath+"/", http.StatusMovedPermanently)

		for _, file := range files {
			if file.IsDir() {
				dirData.Dirs = append(dirData.Dirs, DirData{
					Name: file.Name(),
				})
				r.ServeStaticDir(pattern+file.Name(), filepath.Join(dirPath, file.Name()), a, opt...)
				continue
			}
			fInfo, err := file.Info()
			if err != nil {
				panic(err)
			}
			size := fInfo.Size()
			dirData.Files = append(dirData.Files, FileData{
				Name: file.Name(),
				Size: size,
			})
			err = r.ServeStaticFile(pattern+file.Name(), filepath.Join(dirPath, file.Name()), opt...)
			if err != nil {
				panic(err)
			}
		}

		if indexFileExists {
			indexFileContent, err := os.ReadFile(filepath.Join(dirPath, "index.html"))
			if err != nil {
				panic(err)
			}
			buf.Write(indexFileContent)
		} else {
			if err := dirTempl.Execute(buf, dirData); err != nil {
				panic(err)
			}
		}

		r.GET(urlPath+"/", func(c *Ctx) error {
			c.Response.SetStatus(200)
			c.Response.SetData(buf.Bytes())
			c.Response.AddHeader("Content-Type", "text/html")

			return nil
		})
	} else {
		// TODO: Implement WithoutPreLoad
		panic("Not implemented")
	}
}

func (r *Router) routeExists(path string) int {
	// Checks if route exists and returns the index. If false -1 is returned.
	for i, route := range r.routes {
		if route.path == path {
			return i
		}
	}

	return -1
}

func (r *Router) addEndpoint(m RequestMethod, p string, h Handler, opt ...RouteOption) {
	routeConfig := NewRouteOptionConfig(opt...)
	routeIndex := r.routeExists(p)

	if routeIndex == -1 {
		var endpoints []Endpoint
		if p != "/" {
			optionEP := Endpoint{
				method: METHOD_OPTIONS,
				handleFunc: func(c *Ctx) error {
					c.Response.SetStatus(http.StatusOK)
					return nil
				},
				routeOptionConfig: RouteOptionConfig{},
			}
			endpoints = []Endpoint{optionEP}
		} else {
			endpoints = []Endpoint{}
		}

		r.routes = append(r.routes, &Route{
			basePath:  p,
			path:      fmt.Sprint(r.basePath, p),
			endpoints: endpoints,
		})

		routeIndex = len(r.routes) - 1
	}

	// Prevent adding duplicate OPTIONS endpoint if it already exists
	if m == METHOD_OPTIONS {
		for _, ep := range r.routes[routeIndex].endpoints {
			if ep.method == METHOD_OPTIONS {
				return
			}
		}
	}

	r.routes[routeIndex].endpoints = append(r.routes[routeIndex].endpoints, Endpoint{
		method:            m,
		handleFunc:        h,
		routeOptionConfig: *routeConfig,
		middlewares:       routeConfig.middlewares,
	})
}
