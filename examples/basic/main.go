package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/bata94/apiright/pkg/apiright"
	"github.com/bata94/apiright/pkg/crud"
	_ "github.com/mattn/go-sqlite3"
)

// User represents a user model (typically generated by SQLC)
type User struct {
	ID        int       `json:"id" db:"id"`
	Name      string    `json:"name" db:"name"`
	Email     string    `json:"email" db:"email"`
	CreatedAt time.Time `json:"created_at" db:"created_at"`
	UpdatedAt time.Time `json:"updated_at" db:"updated_at"`
}

// UserAPI represents the API model for users
type UserAPI struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// UserTransformer handles transformation between User and UserAPI
type UserTransformer struct{}

func (ut *UserTransformer) ToAPI(dbModel interface{}) (interface{}, error) {
	user, ok := dbModel.(User)
	if !ok {
		return nil, fmt.Errorf("invalid user model")
	}
	
	return UserAPI{
		ID:    user.ID,
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

func (ut *UserTransformer) FromAPI(apiModel interface{}) (interface{}, error) {
	// In a real implementation, you'd convert the API model back to DB model
	// For this example, we'll keep it simple
	return apiModel, nil
}

func main() {
	// Initialize database
	db, err := sql.Open("sqlite3", ":memory:")
	if err != nil {
		log.Fatal("Failed to open database:", err)
	}
	defer db.Close()

	// Create users table
	createTableSQL := `
	CREATE TABLE users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		email TEXT UNIQUE NOT NULL,
		created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
		updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
	);`
	
	if _, err := db.Exec(createTableSQL); err != nil {
		log.Fatal("Failed to create table:", err)
	}

	// Insert sample data
	insertSQL := `INSERT INTO users (name, email) VALUES (?, ?)`
	_, err = db.Exec(insertSQL, "John Doe", "john@example.com")
	if err != nil {
		log.Fatal("Failed to insert sample data:", err)
	}

	// Initialize APIRight
	app := apiright.New(
		apiright.WithDatabase(db),
		apiright.WithConfig(&apiright.Config{
			Host:       "0.0.0.0",
			Port:       12000,
			APIVersion: "v1",
		}),
	)

	// Register User CRUD endpoints
	crud.Register[User](app, crud.Config{
		TableName:   "users",
		IDField:     "id",
		Route:       "users",
		Transformer: &UserTransformer{},
	})

	// Add a health check endpoint
	app.Router().HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		apiright.SuccessResponse(w, map[string]string{
			"status": "healthy",
			"time":   time.Now().Format(time.RFC3339),
		})
	}).Methods("GET")

	// Start the server
	log.Printf("ðŸš€ Starting APIRight server on port 12000")
	log.Printf("ðŸ“š API Documentation available at:")
	log.Printf("   - Health: GET /health")
	log.Printf("   - Users:  GET /v1/users")
	log.Printf("   - User:   GET /v1/users/{id}")
	log.Printf("   - Create: POST /v1/users")
	log.Printf("   - Update: PUT /v1/users/{id}")
	log.Printf("   - Delete: DELETE /v1/users/{id}")
	
	if err := app.Listen(""); err != nil {
		log.Fatal("Server failed to start:", err)
	}
}