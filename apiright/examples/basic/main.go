package main

import (
	"database/sql"
	"log"

	"github.com/bata94/apiright/pkg/apiright"
	"github.com/bata94/apiright/pkg/transform"
	_ "github.com/mattn/go-sqlite3"
)

// User represents the database model (generated by sqlc)
type User struct {
	ID       int64  `db:"id" json:"id"`
	Name     string `db:"name" json:"name"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"-"` // Hidden from JSON
}

// GetID implements the crud.Model interface
func (u *User) GetID() int64 {
	return u.ID
}

// SetID implements the crud.Model interface
func (u *User) SetID(id int64) {
	u.ID = id
}

// UserAPI represents the API model (what clients see)
type UserAPI struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// Product represents another database model
type Product struct {
	ID          int64   `db:"id" json:"id"`
	Name        string  `db:"name" json:"name"`
	Description string  `db:"description" json:"description"`
	Price       float64 `db:"price" json:"price"`
	CategoryID  int64   `db:"category_id" json:"category_id"`
}

// GetID implements the crud.Model interface
func (p *Product) GetID() int64 {
	return p.ID
}

// SetID implements the crud.Model interface
func (p *Product) SetID(id int64) {
	p.ID = id
}

func main() {
	// Initialize database
	db, err := sql.Open("sqlite3", ":memory:")
	if err != nil {
		log.Fatal("Failed to open database:", err)
	}
	defer db.Close()

	// Create tables
	if err := createTables(db); err != nil {
		log.Fatal("Failed to create tables:", err)
	}

	// Create APIRight app
	config := &apiright.Config{
		Host:         "0.0.0.0",
		Port:         "12000", // Use the provided port
		Database:     "sqlite3",
		DSN:          ":memory:",
		APIVersion:   "v1",
		Debug:        true,
		EnableCORS:   true,
		EnableLogger: true,
	}

	app := apiright.NewWithOptions(
		apiright.WithConfig(config),
		apiright.WithDatabase(db),
	)

	// Register direct CRUD for products (no transformation)
	apiright.RegisterCRUD[*Product](app, "/products", "products")

	// Register CRUD with transformation for users
	userTransformer := transform.NewBiDirectionalTransformer[*User, *UserAPI]()
	apiright.RegisterCRUDWithTransform[*User, *UserAPI](
		app, 
		"/users", 
		"users",
		userTransformer,
	)

	// Add some sample data
	if err := insertSampleData(db); err != nil {
		log.Printf("Warning: Failed to insert sample data: %v", err)
	}

	log.Println("ðŸš€ APIRight server with generics starting...")
	log.Println("Available endpoints:")
	log.Println("  GET    /v1/users     - List all users")
	log.Println("  POST   /v1/users     - Create user")
	log.Println("  GET    /v1/users/{id} - Get user by ID")
	log.Println("  PUT    /v1/users/{id} - Update user")
	log.Println("  DELETE /v1/users/{id} - Delete user")
	log.Println("")
	log.Println("  GET    /v1/products     - List all products")
	log.Println("  POST   /v1/products     - Create product")
	log.Println("  GET    /v1/products/{id} - Get product by ID")
	log.Println("  PUT    /v1/products/{id} - Update product")
	log.Println("  DELETE /v1/products/{id} - Delete product")

	if err := app.Start(); err != nil {
		log.Fatal("Server failed:", err)
	}
}

func createTables(db *sql.DB) error {
	queries := []string{
		`CREATE TABLE users (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			name TEXT NOT NULL,
			email TEXT UNIQUE NOT NULL,
			password TEXT NOT NULL
		)`,
		`CREATE TABLE products (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			name TEXT NOT NULL,
			description TEXT,
			price REAL NOT NULL,
			category_id INTEGER
		)`,
	}

	for _, query := range queries {
		if _, err := db.Exec(query); err != nil {
			return err
		}
	}

	return nil
}

func insertSampleData(db *sql.DB) error {
	// Insert sample users
	userQueries := []string{
		`INSERT INTO users (name, email, password) VALUES ('John Doe', 'john@example.com', 'hashed_password_1')`,
		`INSERT INTO users (name, email, password) VALUES ('Jane Smith', 'jane@example.com', 'hashed_password_2')`,
		`INSERT INTO users (name, email, password) VALUES ('Bob Johnson', 'bob@example.com', 'hashed_password_3')`,
	}

	// Insert sample products
	productQueries := []string{
		`INSERT INTO products (name, description, price, category_id) VALUES ('Laptop', 'High-performance laptop', 999.99, 1)`,
		`INSERT INTO products (name, description, price, category_id) VALUES ('Mouse', 'Wireless optical mouse', 29.99, 2)`,
		`INSERT INTO products (name, description, price, category_id) VALUES ('Keyboard', 'Mechanical gaming keyboard', 149.99, 2)`,
	}

	allQueries := append(userQueries, productQueries...)
	
	for _, query := range allQueries {
		if _, err := db.Exec(query); err != nil {
			return err
		}
	}

	return nil
}